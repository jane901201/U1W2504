using NUnit.Framework;
using UnityEngine;

// Generated By GPT
[TestFixture]
public class EscapeTest
{
    private Escape _escape;

    // Setup is run before each test
    [SetUp]
    public void Setup()
    {
        // 创建 Escape 实例
        _escape = new GameObject().AddComponent<Escape>();
    }

    // Test case 1: 检查逃离目标计算是否正常
    [Test]
    public void TestEscapeTargetLocation()
    {
        // 初始化地图和分区
        Vector2 mapSize = new Vector2(100f, 100f);  // 假设地图大小为100x100单位
        _escape.Initialize(mapSize, 9);  // 默认分区数量为9

        // 测试用例：设置玩家位置
        Vector3 playerPosition = new Vector3(30f, 30f, 0f);  // 玩家在(30, 30)的位置

        // 获取逃离目标位置
        Vector3 escapeTarget = _escape.GetEscapeTargetLocation(playerPosition, playerPosition);

        // 验证目标位置是否在合理范围内
        Assert.That(escapeTarget.x, Is.InRange(0f, mapSize.x));
        Assert.That(escapeTarget.y, Is.InRange(0f, mapSize.y));
    }

    // Test case 2: 检查敌人避开自己的分区
    [Test]
    public void TestAvoidOwnPartition()
    {
        // 初始化地图和分区
        Vector2 mapSize = new Vector2(100f, 100f);  // 假设地图大小为100x100单位
        _escape.Initialize(mapSize, 9);  // 默认分区数量为9

        // 设置敌人和玩家的位置
        Vector3 enemyPosition = new Vector3(30f, 30f, 0f);  // 敌人（自己）位置
        Vector3 playerPosition = new Vector3(70f, 70f, 0f);  // 玩家位置

        // 获取敌人逃离目标
        Vector3 escapeTarget = _escape.GetEscapeTargetLocation(playerPosition, enemyPosition);

        // 检查敌人是否逃离到敌人所在分区之外
        int enemyPartition = _escape.GetPartition(enemyPosition);
        int escapePartition = _escape.GetPartition(escapeTarget);

        // Debug output to verify the partitions
        Debug.Log($"Enemy partition: {enemyPartition}, Escape partition: {escapePartition}");

        // 断言逃离目标分区与敌人所在分区不相同
        Assert.AreNotEqual(enemyPartition, escapePartition);
    }


    // Test case 3: 检查玩家与逃离目标之间的距离是否合理
    [Test]
    public void TestDistanceToEscapeTarget()
    {
        // 初始化地图和分区
        Vector2 mapSize = new Vector2(100f, 100f);  // 假设地图大小为100x100单位
        _escape.Initialize(mapSize, 9);  // 默认分区数量为9

        // 设置玩家位置
        Vector3 playerPosition = new Vector3(30f, 30f, 0f);  // 玩家在(30, 30)的位置

        // 获取逃离目标位置
        Vector3 escapeTarget = _escape.GetEscapeTargetLocation(playerPosition, playerPosition);

        // 检查逃离目标的位置是否远离玩家
        float distance = Vector3.Distance(playerPosition, escapeTarget);
        Assert.That(distance, Is.GreaterThan(0f));  // 目标应该离玩家有一定的距离
    }
}
